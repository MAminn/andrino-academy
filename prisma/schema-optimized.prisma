// Optimized Prisma Schema for Andrino Academy
// Focuses on core Academic Structure and External Session Coordination
// Removes unused models and simplifies relationships

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Core User Model - Simplified and Optimized
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  role          String    @default("student") // student, instructor, coordinator, manager, ceo
  emailVerified DateTime?
  image         String?
  
  // Student-specific fields
  age           Int?
  parentEmail   String?
  parentPhone   String?
  parentName    String?
  priorExperience String? // "none", "basic", "intermediate", "advanced"
  gradeId       String? // Assigned grade for academic structure
  
  // Profile fields
  phone         String?
  address       String?
  emergencyContact String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js required relations
  accounts              Account[]
  sessions              Session[]

  // Academic Structure Relations (Core LMS)
  assignedGrade         Grade?                    @relation("StudentGrade", fields: [gradeId], references: [id], onDelete: SetNull)
  instructedTracks      Track[]                   @relation("TrackInstructor")
  coordinatedTracks     Track[]                   @relation("TrackCoordinator")
  instructedSessions    LiveSession[]             @relation("SessionInstructor")
  sessionAttendances    SessionAttendance[]       @relation("StudentSessionAttendance")

  // Indexes for performance optimization
  @@index([role])
  @@index([gradeId])
  @@index([email])
  @@map("User")
}

// NextAuth.js Required Models (Unchanged)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

// Academic Structure Models - Core LMS Domain
model Grade {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  order       Int?     // For ordering grades (1st, 2nd, etc.)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  students    User[]   @relation("StudentGrade")
  tracks      Track[]

  // Performance indexes
  @@index([isActive])
  @@index([order])
  @@map("Grade")
}

model Track {
  id            String   @id @default(cuid())
  name          String
  description   String?
  gradeId       String
  instructorId  String
  coordinatorId String
  isActive      Boolean  @default(true)
  order         Int?     // For ordering tracks within a grade
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  grade        Grade         @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  instructor   User          @relation("TrackInstructor", fields: [instructorId], references: [id], onDelete: Restrict)
  coordinator  User          @relation("TrackCoordinator", fields: [coordinatorId], references: [id], onDelete: Restrict)
  liveSessions LiveSession[]

  // Performance indexes for frequent queries
  @@index([gradeId])
  @@index([instructorId])
  @@index([coordinatorId])
  @@index([isActive])
  @@map("Track")
}

// External Session Coordination - Core Feature
model LiveSession {
  id           String        @id @default(cuid())
  title        String
  description  String?
  trackId      String
  instructorId String
  date         DateTime
  startTime    String        // Format: "HH:mm" (e.g., "14:30")
  endTime      String        // Format: "HH:mm" (e.g., "16:00")
  externalLink String?       // External meeting URL (Zoom, Google Meet, Teams, etc.)
  status       SessionStatus @default(DRAFT) // External coordination status workflow
  materials    String?       // JSON string for session materials/links
  notes        String?       // Instructor notes
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  track          Track              @relation(fields: [trackId], references: [id], onDelete: Cascade)
  instructor     User               @relation("SessionInstructor", fields: [instructorId], references: [id], onDelete: Restrict)
  attendances    SessionAttendance[]

  // Critical performance indexes for dashboard queries
  @@index([trackId])
  @@index([instructorId])
  @@index([date])
  @@index([status])
  @@index([date, startTime]) // Composite index for session scheduling
  @@map("LiveSession")
}

model SessionAttendance {
  id            String   @id @default(cuid())
  sessionId     String
  studentId     String
  status        String   @default("absent") // present, absent, late, excused
  markedAt      DateTime @default(now())
  markedBy      String?  // coordinator or instructor who marked attendance
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  session LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student User        @relation("StudentSessionAttendance", fields: [studentId], references: [id], onDelete: Cascade)

  // Ensure one attendance record per student per session
  @@unique([sessionId, studentId])
  
  // Performance indexes for attendance queries
  @@index([sessionId])
  @@index([studentId])
  @@index([status])
  @@index([markedAt]) // For attendance reporting
  @@map("SessionAttendance")
}

// Session Status Enum for External Coordination Platform
enum SessionStatus {
  DRAFT      // Session created without external link
  SCHEDULED  // Session scheduled with date/time but no external link
  READY      // Session has external link and is ready to start
  ACTIVE     // Session is currently in progress (external link active)
  COMPLETED  // Session finished successfully
  CANCELLED  // Session was cancelled
}